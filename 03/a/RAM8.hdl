// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    
    // dmux8way uses the address[3] to point the load to the right register.
    DMux8Way(in=load, sel=address, a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h);

    // Now we need the 8 registers, using the demultiplexed input from above.
    Register(in=in, load=a, out=x0);
    Register(in=in, load=b, out=x1);
    Register(in=in, load=c, out=x2);
    Register(in=in, load=d, out=x3);
    Register(in=in, load=e, out=x4);
    Register(in=in, load=f, out=x5);
    Register(in=in, load=g, out=x6);
    Register(in=in, load=h, out=x7);

    // multiplexer based on address to get the output value
    Mux8Way16(a=x0,b=x1,c=x2,d=x3,e=x4,f=x5,g=x6,h=x7, sel=address, out=out);
}